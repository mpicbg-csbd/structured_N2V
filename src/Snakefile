## invoke with:
## alias csnake='snakemake -j 10 --cluster-config cluster.yaml --cluster "sbatch -J {rule} -p {cluster.p} --gres {cluster.gres} "'
## (that's now in bashrc. e.g. usage below)
## csnake train_flower_n2gt

localrules: analysis

## flower rules

flowerdata = '/lustre/projects/project-broaddus/rawdata/artifacts/flower.tif'
flowerdir  = '/lustre/projects/project-broaddus/denoise_experiments/flower/e01/'

rule flower_n2v2_single:
  output: flowerdir + 'mask{n}/'
  run:
    import n2v2_flower, predict
    d = n2v2_flower.setup_flower_shutter(flowerdata,output[0])
    ta = n2v2_flower.train(d,end_epoch=600,mask_shape=range(int(wildcards.n)))
    predict.predict_on_full_2d_stack(flowerdata,output[0],output[0] + 'models/net600.pt')

rule flower_n2v2_all:
  input: [flowerdir + f'mask{n:02d}/' for n in range(9)]

rule flower_n2gt:
  output: flowerdir + "n2gt2/"
  run:
    import n2gt_2d, predict
    d  = n2gt_2d.setup_flower_shutter(flowerdata, output[0])
    ta = n2gt_2d.init_training_artifacts()
    n2gt_2d.train(d,ta,end_epoch=600);
    predict.predict_on_full_2d_stack(flowerdata,output[0],output[0] + 'models/net600.pt')

rule flower_nlm:
  output: flowerdir + 'nlm/'
  run:
    import nlm_comparison
    nlm_comparison.nlm_2d(flowerdata, output[0], sigma=0.1)

rule flower_bm3d:
  output: flowerdir + "bm3d/"
  run:
    import nlm_comparison
    nlm_comparison.bm3d_2d(flowerdata, output[0], sigma=0.1)

rule flower_analysis:
  output: 
    flowerdir + 'table.csv',
    flowerdir + 'table.png'
  run:
    import analysis2
    ## WARNING: input files are hardcoded
    dat = analysis2.load_flower()
    analysis2.print_metrics_fullpatch(dat,outfile=output[0])
    analysis2.make_visual_table(dat,outfile=output[1])

## shutter rules

shutterdata = '/lustre/projects/project-broaddus/rawdata/artifacts/shutterclosed.tif'
shutterdir  = '/lustre/projects/project-broaddus/denoise_experiments/shutter/e01/'

rule shutter_n2v2_single:
  output: shutterdir + 'mask{n}/'
  run:
    import n2v2_flower, predict
    # d = n2v2_flower.setup_flower_shutter(shutterdata,output[0])
    # ta = n2v2_flower.train(d,end_epoch=600,mask_shape=range(int(wildcards.n)))
    predict.predict_on_full_2d_stack(shutterdata,output[0],output[0] + 'models/net600.pt')

rule shutter_n2v2_all:
  input: [shutterdir + f'mask{n:02d}/' for n in range(9)]

rule shutter_n2gt:
  output: shutterdir + "n2gt2/"
  run:
    import n2gt_2d, predict
    d  = n2gt_2d.setup_flower_shutter(shutterdata, output[0])
    ta = n2gt_2d.init_training_artifacts()
    n2gt_2d.train(d,ta,end_epoch=600);
    predict.predict_on_full_2d_stack(shutterdata,output[0],output[0] + 'models/net600.pt')

rule shutter_nlm:
  output: shutterdir + 'nlm/'
  run:
    import nlm_comparison
    nlm_comparison.nlm_2d(shutterdata, output[0], sigma=0.1)

rule shutter_bm3d:
  output: shutterdir + 'bm3d/'
  run:
    import nlm_comparison
    nlm_comparison.bm3d_2d(shutterdata, output[0], sigma=0.1)

rule shutter_analysis:
  output:
    shutterdir + 'table.csv',
    shutterdir + 'table.png'
  run:
    import analysis2
    ## WARNING: input files are hardcoded
    dat = analysis2.load_shutter()
    analysis2.print_metrics_fullpatch(dat,outfile=output[0])
    analysis2.make_visual_table(dat,outfile=output[1])

rule shutter_all:
  input: rules.shutter_n2v2_all.input,
         rules.shutter_n2gt.input,
         rules.shutter_nlm.input,
         rules.shutter_bm3d.input,



## analysis 

rule analysis:
  input:
  output: "/projects/project-broaddus/denoise_experiments/flower/e01/table.csv",
          "/projects/project-broaddus/denoise_experiments/flower/e01/table.png",
  run:
    import analysis2
    dat = analysis2.fulldata_fullpatch()
    analysis2.print_metrics_fullpatch(dat,outfile=output[0])
    analysis2.make_visual_table(dat,outfile=output[1])



