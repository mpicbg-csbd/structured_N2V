## invoke with:
## alias csnake='snakemake -j 10 --cluster-config cluster.yaml --cluster "sbatch -J {rule} -p {cluster.p} --gres {cluster.gres} -n {cluster.n} -t {cluster.t} -c {cluster.c} --mem {cluster.mem}"'
## (that's now in bashrc. e.g. usage below)
## csnake train_flower_n2gt
# from types import SimpleNamespace
# from utils import flatten, recursive_map2

import files as F

localrules:
  shutter_nlm_all,
  cele_nlm_all,
  flower_analysis_wild,
  flower_analysis_merge,

## flower data

rule void:

rule flower_top:
  input: 
    F.flower_results,
    F.flower_table_tex,

rule flower_n2v2_wild:
  output: F.flowerdir + 'mask{n}_{m}/'
  run:
    import n2v2_flower, predict
    d = n2v2_flower.setup_flower_shutter(F.flowerdata,output[0])
    ta = n2v2_flower.train(d,end_epoch=600,mask_shape=range(int(wildcards.n)))
    predict.predict_on_full_2d_stack(F.flowerdata,output[0],output[0] + 'models/net600.pt')

rule flower_n2gt_wild:
  output: F.flowerdir + "n2gt2/{n}/"
  run:
    import n2gt_2d, predict
    d  = n2gt_2d.setup_flower_shutter(F.flowerdata, output[0])
    ta = n2gt_2d.init_training_artifacts()
    n2gt_2d.train(d,ta,end_epoch=600);
    predict.predict_on_full_2d_stack(F.flowerdata,output[0],output[0] + 'models/net600.pt')

rule flower_nlm:
  output: F.nlm_dir
  run:
    import nlm_comparison
    nlm_comparison.nlm_2d(F.flowerdata, output[0])

rule flower_bm3d:
  output: F.bm3d_dir
  run:
    import nlm_comparison
    nlm_comparison.bm3d_2d(F.flowerdata, output[0])

rule flower_analysis_wild:
  input:  F.flowerdir + '{dirname}/'
  output: F.flowerdir + '{dirname}/table.csv'
  run:
    import analysis2
    analysis2.load_prediction_and_eval_metrics__generic(input[0])

rule flower_analysis_merge:
  input: F.all_tables.values()
  output: F.flower_results, F.flower_table_tex
  run:
    import analysis2
    analysis2.merge_all_results()
    analysis2.make_metrics_table()





rule shuttertop:
  input:
    F.shutter_dir_nlm,
    F.shutter_dir_bm3d

rule shutter_analysis_wild:
  input:  F.shutterdir + '{dirname}/'
  output: F.shutterdir + '{dirname}/table.csv'
  run:
    import analysis2
    analysis2.load_prediction_and_eval_metrics__generic(input[0])

rule shutter_n2v2_single:
  output: F.shutterdir + 'mask{n}/'
  run:
    import n2v2_flower, predict
    # d = n2v2_flower.setup_flower_shutter(F.shutterdata,output[0])
    # ta = n2v2_flower.train(d,end_epoch=600,mask_shape=range(int(wildcards.n)))
    predict.predict_on_full_2d_stack(F.shutterdata,output[0],output[0] + 'models/net600.pt')

rule shutter_n2gt:
  output: F.shutterdir + "n2gt2/"
  run:
    import n2gt_2d, predict
    d  = n2gt_2d.setup_flower_shutter(F.shutterdata, output[0])
    ta = n2gt_2d.init_training_artifacts()
    n2gt_2d.train(d,ta,end_epoch=600);
    predict.predict_on_full_2d_stack(F.shutterdata,output[0],output[0] + 'models/net600.pt')

rule shutter_nlm:
  output: F.shutter_dir_nlm
  run:
    import nlm_comparison
    nlm_comparison.nlm_2d(F.shutterdata, output[0])

rule shutter_bm3d:
  output: F.shutter_dir_bm3d
  run:
    import nlm_comparison
    nlm_comparison.bm3d_2d(F.shutterdata, output[0])




rule cele_top:
  input:
    F.cele_n2v2_dirs,
    F.cele_nlm_dirs,
    F.cele_n2v2_pimgs,

rule cele_n2v2_train_wild:
  output: F.celedir + 'mask_1_x{n}y{m}/'
  run:
    import n2v2_cele
    d  = n2v2_cele.setup(output[0])
    ta = n2v2_cele.init_training_artifacts()
    n2v2_cele.train(d, ta, end_epoch=100, xmask=range(int(wildcards.n)+1), ymask=range(int(wildcards.m)+1));

rule cele_n2v2_predict_wild:
  input:  F.celedir + 'mask_1_x{n}y{m}/'
  output: F.celedir + 'mask_1_x{n}y{m}/pimgs/pimg01_000.tif'
  run:
    import n2v2_cele
    d = n2v2_cele.setup(input[0])
    d.net.load_state_dict(n2v2_cele.torch.load(input[0] + 'models/net100.pt'))
    n2v2_cele.predict_movies(d)

rule cele_nlm_wild:
  output: F.celedir + 'nlm/{n}/'
  run:
    import nlm_comparison
    sigma = int(wildcards.n)/100
    nlm_comparison.nlm_3d_cele(output[0], sigma=sigma)

localrules: correlation_analysis

rule correlation_analysis:
  output: F.d_correlation_analysis
  run:
    import analysis2
    analysis2.correlation_analysis(F.shutterdata, F.d_correlation_analysis, 'shut', removeGT=False)
    analysis2.correlation_analysis(F.flowerdata,  F.d_correlation_analysis, 'fl',   removeGT=False)
    analysis2.correlation_analysis(F.flowerdata,  F.d_correlation_analysis, 'flGT', removeGT=True)

# rule fig_data:
#   output: 
#   run:
#     import analysis2, shutil
#     from distutils import dir_util
#     analysis2.fig1()




